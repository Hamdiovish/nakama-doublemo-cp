// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.10
// source: nakama_cluster_api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Frame_Direct int32

const (
	Frame_Send      Frame_Direct = 0
	Frame_Reply     Frame_Direct = 1
	Frame_Broadcast Frame_Direct = 2
)

// Enum value maps for Frame_Direct.
var (
	Frame_Direct_name = map[int32]string{
		0: "Send",
		1: "Reply",
		2: "Broadcast",
	}
	Frame_Direct_value = map[string]int32{
		"Send":      0,
		"Reply":     1,
		"Broadcast": 2,
	}
)

func (x Frame_Direct) Enum() *Frame_Direct {
	p := new(Frame_Direct)
	*p = x
	return p
}

func (x Frame_Direct) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Frame_Direct) Descriptor() protoreflect.EnumDescriptor {
	return file_nakama_cluster_api_proto_enumTypes[0].Descriptor()
}

func (Frame_Direct) Type() protoreflect.EnumType {
	return &file_nakama_cluster_api_proto_enumTypes[0]
}

func (x Frame_Direct) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Frame_Direct.Descriptor instead.
func (Frame_Direct) EnumDescriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{0, 0}
}

type Message_MsgID int32

const (
	Message_BROADCAST       Message_MsgID = 0
	Message_SESSIONSTART    Message_MsgID = 1
	Message_SESSIONEND      Message_MsgID = 2
	Message_STATE           Message_MsgID = 3
	Message_ENVELOPE        Message_MsgID = 4
	Message_TRACK           Message_MsgID = 5
	Message_UNTRACK         Message_MsgID = 6
	Message_UNTRACKALL      Message_MsgID = 7
	Message_UNTRACKBYSTREAM Message_MsgID = 8
	Message_UNTRACKBYMODES  Message_MsgID = 9
	Message_TRACKUPDATE     Message_MsgID = 10
)

// Enum value maps for Message_MsgID.
var (
	Message_MsgID_name = map[int32]string{
		0:  "BROADCAST",
		1:  "SESSIONSTART",
		2:  "SESSIONEND",
		3:  "STATE",
		4:  "ENVELOPE",
		5:  "TRACK",
		6:  "UNTRACK",
		7:  "UNTRACKALL",
		8:  "UNTRACKBYSTREAM",
		9:  "UNTRACKBYMODES",
		10: "TRACKUPDATE",
	}
	Message_MsgID_value = map[string]int32{
		"BROADCAST":       0,
		"SESSIONSTART":    1,
		"SESSIONEND":      2,
		"STATE":           3,
		"ENVELOPE":        4,
		"TRACK":           5,
		"UNTRACK":         6,
		"UNTRACKALL":      7,
		"UNTRACKBYSTREAM": 8,
		"UNTRACKBYMODES":  9,
		"TRACKUPDATE":     10,
	}
)

func (x Message_MsgID) Enum() *Message_MsgID {
	p := new(Message_MsgID)
	*p = x
	return p
}

func (x Message_MsgID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_MsgID) Descriptor() protoreflect.EnumDescriptor {
	return file_nakama_cluster_api_proto_enumTypes[1].Descriptor()
}

func (Message_MsgID) Type() protoreflect.EnumType {
	return &file_nakama_cluster_api_proto_enumTypes[1]
}

func (x Message_MsgID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_MsgID.Descriptor instead.
func (Message_MsgID) EnumDescriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{3, 0}
}

type Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SeqID  uint64       `protobuf:"varint,2,opt,name=seqID,proto3" json:"seqID,omitempty"`
	Node   string       `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	Bytes  []byte       `protobuf:"bytes,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Direct Frame_Direct `protobuf:"varint,5,opt,name=direct,proto3,enum=nakama.cluster.Frame_Direct" json:"direct,omitempty"`
}

func (x *Frame) Reset() {
	*x = Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakama_cluster_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frame) ProtoMessage() {}

func (x *Frame) ProtoReflect() protoreflect.Message {
	mi := &file_nakama_cluster_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frame.ProtoReflect.Descriptor instead.
func (*Frame) Descriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{0}
}

func (x *Frame) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Frame) GetSeqID() uint64 {
	if x != nil {
		return x.SeqID
	}
	return 0
}

func (x *Frame) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *Frame) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *Frame) GetDirect() Frame_Direct {
	if x != nil {
		return x.Direct
	}
	return Frame_Send
}

type Envelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid Message_MsgID `protobuf:"varint,1,opt,name=cid,proto3,enum=nakama.cluster.Message_MsgID" json:"cid,omitempty"`
	// Types that are assignable to Payload:
	//	*Envelope_Bytes
	//	*Envelope_Error
	Payload isEnvelope_Payload `protobuf_oneof:"payload"`
	Vars    map[string]string  `protobuf:"bytes,4,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakama_cluster_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_nakama_cluster_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{1}
}

func (x *Envelope) GetCid() Message_MsgID {
	if x != nil {
		return x.Cid
	}
	return Message_BROADCAST
}

func (m *Envelope) GetPayload() isEnvelope_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Envelope) GetBytes() []byte {
	if x, ok := x.GetPayload().(*Envelope_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *Envelope) GetError() *Error {
	if x, ok := x.GetPayload().(*Envelope_Error); ok {
		return x.Error
	}
	return nil
}

func (x *Envelope) GetVars() map[string]string {
	if x != nil {
		return x.Vars
	}
	return nil
}

type isEnvelope_Payload interface {
	isEnvelope_Payload()
}

type Envelope_Bytes struct {
	Bytes []byte `protobuf:"bytes,2,opt,name=bytes,proto3,oneof"`
}

type Envelope_Error struct {
	Error *Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*Envelope_Bytes) isEnvelope_Payload() {}

func (*Envelope_Error) isEnvelope_Payload() {}

// error
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error code which should be one of "Error.Code" enums.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A message in English to help developers debug the response.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Additional error details which may be different for each response.
	Context map[string]string `protobuf:"bytes,3,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakama_cluster_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_nakama_cluster_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakama_cluster_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_nakama_cluster_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{3}
}

type Message_SessionStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID  string            `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	UserID     string            `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Username   string            `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	ClientIP   string            `protobuf:"bytes,4,opt,name=clientIP,proto3" json:"clientIP,omitempty"`
	ClientPort string            `protobuf:"bytes,5,opt,name=clientPort,proto3" json:"clientPort,omitempty"`
	Format     int32             `protobuf:"varint,6,opt,name=format,proto3" json:"format,omitempty"`
	Status     string            `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Lang       string            `protobuf:"bytes,8,opt,name=lang,proto3" json:"lang,omitempty"`
	Expiry     int64             `protobuf:"varint,9,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Vars       map[string]string `protobuf:"bytes,10,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Message_SessionStart) Reset() {
	*x = Message_SessionStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakama_cluster_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_SessionStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_SessionStart) ProtoMessage() {}

func (x *Message_SessionStart) ProtoReflect() protoreflect.Message {
	mi := &file_nakama_cluster_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_SessionStart.ProtoReflect.Descriptor instead.
func (*Message_SessionStart) Descriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Message_SessionStart) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Message_SessionStart) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Message_SessionStart) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Message_SessionStart) GetClientIP() string {
	if x != nil {
		return x.ClientIP
	}
	return ""
}

func (x *Message_SessionStart) GetClientPort() string {
	if x != nil {
		return x.ClientPort
	}
	return ""
}

func (x *Message_SessionStart) GetFormat() int32 {
	if x != nil {
		return x.Format
	}
	return 0
}

func (x *Message_SessionStart) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Message_SessionStart) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *Message_SessionStart) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *Message_SessionStart) GetVars() map[string]string {
	if x != nil {
		return x.Vars
	}
	return nil
}

type Message_SessionEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	UserID    string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Msg       string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Reason    int32  `protobuf:"varint,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Message_SessionEnd) Reset() {
	*x = Message_SessionEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakama_cluster_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_SessionEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_SessionEnd) ProtoMessage() {}

func (x *Message_SessionEnd) ProtoReflect() protoreflect.Message {
	mi := &file_nakama_cluster_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_SessionEnd.ProtoReflect.Descriptor instead.
func (*Message_SessionEnd) Descriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Message_SessionEnd) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Message_SessionEnd) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Message_SessionEnd) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Message_SessionEnd) GetReason() int32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type Message_PresenceStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode       int32  `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
	Subject    string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Subcontext string `protobuf:"bytes,3,opt,name=subcontext,proto3" json:"subcontext,omitempty"`
	Label      string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *Message_PresenceStream) Reset() {
	*x = Message_PresenceStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakama_cluster_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_PresenceStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PresenceStream) ProtoMessage() {}

func (x *Message_PresenceStream) ProtoReflect() protoreflect.Message {
	mi := &file_nakama_cluster_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PresenceStream.ProtoReflect.Descriptor instead.
func (*Message_PresenceStream) Descriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Message_PresenceStream) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *Message_PresenceStream) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Message_PresenceStream) GetSubcontext() string {
	if x != nil {
		return x.Subcontext
	}
	return ""
}

func (x *Message_PresenceStream) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type Message_PresenceMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format      int32  `protobuf:"varint,1,opt,name=format,proto3" json:"format,omitempty"`
	Hidden      bool   `protobuf:"varint,2,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Persistence bool   `protobuf:"varint,3,opt,name=persistence,proto3" json:"persistence,omitempty"`
	Username    string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Status      string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Reason      uint32 `protobuf:"varint,6,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Message_PresenceMeta) Reset() {
	*x = Message_PresenceMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakama_cluster_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_PresenceMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PresenceMeta) ProtoMessage() {}

func (x *Message_PresenceMeta) ProtoReflect() protoreflect.Message {
	mi := &file_nakama_cluster_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PresenceMeta.ProtoReflect.Descriptor instead.
func (*Message_PresenceMeta) Descriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{3, 3}
}

func (x *Message_PresenceMeta) GetFormat() int32 {
	if x != nil {
		return x.Format
	}
	return 0
}

func (x *Message_PresenceMeta) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Message_PresenceMeta) GetPersistence() bool {
	if x != nil {
		return x.Persistence
	}
	return false
}

func (x *Message_PresenceMeta) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Message_PresenceMeta) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Message_PresenceMeta) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type Message_PresenceID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node      string `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	SessionID string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (x *Message_PresenceID) Reset() {
	*x = Message_PresenceID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakama_cluster_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_PresenceID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_PresenceID) ProtoMessage() {}

func (x *Message_PresenceID) ProtoReflect() protoreflect.Message {
	mi := &file_nakama_cluster_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_PresenceID.ProtoReflect.Descriptor instead.
func (*Message_PresenceID) Descriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{3, 4}
}

func (x *Message_PresenceID) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *Message_PresenceID) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

type Message_Presence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *Message_PresenceID     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Stream *Message_PresenceStream `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	UserID string                  `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	Meta   *Message_PresenceMeta   `protobuf:"bytes,4,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *Message_Presence) Reset() {
	*x = Message_Presence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakama_cluster_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Presence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Presence) ProtoMessage() {}

func (x *Message_Presence) ProtoReflect() protoreflect.Message {
	mi := &file_nakama_cluster_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Presence.ProtoReflect.Descriptor instead.
func (*Message_Presence) Descriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{3, 5}
}

func (x *Message_Presence) GetId() *Message_PresenceID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Message_Presence) GetStream() *Message_PresenceStream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *Message_Presence) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Message_Presence) GetMeta() *Message_PresenceMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type Message_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node      string              `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Presences []*Message_Presence `protobuf:"bytes,2,rep,name=presences,proto3" json:"presences,omitempty"`
}

func (x *Message_State) Reset() {
	*x = Message_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakama_cluster_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_State) ProtoMessage() {}

func (x *Message_State) ProtoReflect() protoreflect.Message {
	mi := &file_nakama_cluster_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_State.ProtoReflect.Descriptor instead.
func (*Message_State) Descriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{3, 6}
}

func (x *Message_State) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *Message_State) GetPresences() []*Message_Presence {
	if x != nil {
		return x.Presences
	}
	return nil
}

type Message_Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Presences []*Message_Presence `protobuf:"bytes,1,rep,name=presences,proto3" json:"presences,omitempty"`
}

func (x *Message_Track) Reset() {
	*x = Message_Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakama_cluster_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Track) ProtoMessage() {}

func (x *Message_Track) ProtoReflect() protoreflect.Message {
	mi := &file_nakama_cluster_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Track.ProtoReflect.Descriptor instead.
func (*Message_Track) Descriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{3, 7}
}

func (x *Message_Track) GetPresences() []*Message_Presence {
	if x != nil {
		return x.Presences
	}
	return nil
}

type Message_Untrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Presences []*Message_Presence `protobuf:"bytes,1,rep,name=presences,proto3" json:"presences,omitempty"`
}

func (x *Message_Untrack) Reset() {
	*x = Message_Untrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakama_cluster_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Untrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Untrack) ProtoMessage() {}

func (x *Message_Untrack) ProtoReflect() protoreflect.Message {
	mi := &file_nakama_cluster_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Untrack.ProtoReflect.Descriptor instead.
func (*Message_Untrack) Descriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{3, 8}
}

func (x *Message_Untrack) GetPresences() []*Message_Presence {
	if x != nil {
		return x.Presences
	}
	return nil
}

type Message_UntrackAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Reason    int32  `protobuf:"varint,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Message_UntrackAll) Reset() {
	*x = Message_UntrackAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakama_cluster_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_UntrackAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_UntrackAll) ProtoMessage() {}

func (x *Message_UntrackAll) ProtoReflect() protoreflect.Message {
	mi := &file_nakama_cluster_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_UntrackAll.ProtoReflect.Descriptor instead.
func (*Message_UntrackAll) Descriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{3, 9}
}

func (x *Message_UntrackAll) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Message_UntrackAll) GetReason() int32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type Message_UntrackByStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Streams []*Message_PresenceStream `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty"`
}

func (x *Message_UntrackByStream) Reset() {
	*x = Message_UntrackByStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakama_cluster_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_UntrackByStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_UntrackByStream) ProtoMessage() {}

func (x *Message_UntrackByStream) ProtoReflect() protoreflect.Message {
	mi := &file_nakama_cluster_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_UntrackByStream.ProtoReflect.Descriptor instead.
func (*Message_UntrackByStream) Descriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{3, 10}
}

func (x *Message_UntrackByStream) GetStreams() []*Message_PresenceStream {
	if x != nil {
		return x.Streams
	}
	return nil
}

type Message_UntrackByMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modes      []int32                 `protobuf:"varint,1,rep,packed,name=modes,proto3" json:"modes,omitempty"`
	SkipStream *Message_PresenceStream `protobuf:"bytes,2,opt,name=skipStream,proto3" json:"skipStream,omitempty"`
	SessionID  string                  `protobuf:"bytes,3,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (x *Message_UntrackByMode) Reset() {
	*x = Message_UntrackByMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakama_cluster_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_UntrackByMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_UntrackByMode) ProtoMessage() {}

func (x *Message_UntrackByMode) ProtoReflect() protoreflect.Message {
	mi := &file_nakama_cluster_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_UntrackByMode.ProtoReflect.Descriptor instead.
func (*Message_UntrackByMode) Descriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{3, 11}
}

func (x *Message_UntrackByMode) GetModes() []int32 {
	if x != nil {
		return x.Modes
	}
	return nil
}

func (x *Message_UntrackByMode) GetSkipStream() *Message_PresenceStream {
	if x != nil {
		return x.SkipStream
	}
	return nil
}

func (x *Message_UntrackByMode) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

type Message_TrackUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID string                  `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	UserID    string                  `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Stream    *Message_PresenceStream `protobuf:"bytes,3,opt,name=stream,proto3" json:"stream,omitempty"`
	Meta      *Message_PresenceMeta   `protobuf:"bytes,4,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *Message_TrackUpdate) Reset() {
	*x = Message_TrackUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakama_cluster_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_TrackUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_TrackUpdate) ProtoMessage() {}

func (x *Message_TrackUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_nakama_cluster_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_TrackUpdate.ProtoReflect.Descriptor instead.
func (*Message_TrackUpdate) Descriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{3, 12}
}

func (x *Message_TrackUpdate) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Message_TrackUpdate) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Message_TrackUpdate) GetStream() *Message_PresenceStream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *Message_TrackUpdate) GetMeta() *Message_PresenceMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type Message_Envelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID map[string]bool `protobuf:"bytes,1,rep,name=sessionID,proto3" json:"sessionID,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Message   []byte          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Message_Envelope) Reset() {
	*x = Message_Envelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nakama_cluster_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Envelope) ProtoMessage() {}

func (x *Message_Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_nakama_cluster_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Envelope.ProtoReflect.Descriptor instead.
func (*Message_Envelope) Descriptor() ([]byte, []int) {
	return file_nakama_cluster_api_proto_rawDescGZIP(), []int{3, 13}
}

func (x *Message_Envelope) GetSessionID() map[string]bool {
	if x != nil {
		return x.SessionID
	}
	return nil
}

func (x *Message_Envelope) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

var File_nakama_cluster_api_proto protoreflect.FileDescriptor

var file_nakama_cluster_api_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x05, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x52, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x22, 0x2c, 0x0a, 0x06, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x10, 0x02, 0x22, 0xfe, 0x01, 0x0a, 0x08, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x49,
	0x44, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x36, 0x0a,
	0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x76, 0x61, 0x72, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a,
	0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe9, 0x10, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xf5, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x12, 0x42, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x6c, 0x0a, 0x0a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0x74, 0x0a,
	0x0e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x1a, 0xac, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x1a, 0x3e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x1a, 0xd0, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x32, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x5b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x1a, 0x47, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x49, 0x0a, 0x07, 0x55,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x61, 0x6b, 0x61,
	0x6d, 0x61, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x42, 0x0a, 0x0a, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x41, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0x53, 0x0a, 0x0f, 0x55, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x40, 0x0a,
	0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x1a,
	0x8b, 0x01, 0x0a, 0x0d, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x1a, 0xbd, 0x01,
	0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0xb1, 0x01,
	0x0a, 0x08, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xb3, 0x01, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x0d, 0x0a, 0x09, 0x42,
	0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x56, 0x45, 0x4c,
	0x4f, 0x50, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x10, 0x05,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x10, 0x06, 0x12, 0x0e, 0x0a,
	0x0a, 0x55, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x41, 0x4c, 0x4c, 0x10, 0x07, 0x12, 0x13, 0x0a,
	0x0f, 0x55, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x42, 0x59, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x42, 0x59, 0x4d,
	0x4f, 0x44, 0x45, 0x53, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x32, 0x8d, 0x01, 0x0a, 0x09, 0x41, 0x70, 0x69, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x18, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x1a, 0x18, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x1a, 0x18, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x6d, 0x6f, 0x2f, 0x6e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nakama_cluster_api_proto_rawDescOnce sync.Once
	file_nakama_cluster_api_proto_rawDescData = file_nakama_cluster_api_proto_rawDesc
)

func file_nakama_cluster_api_proto_rawDescGZIP() []byte {
	file_nakama_cluster_api_proto_rawDescOnce.Do(func() {
		file_nakama_cluster_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_nakama_cluster_api_proto_rawDescData)
	})
	return file_nakama_cluster_api_proto_rawDescData
}

var file_nakama_cluster_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_nakama_cluster_api_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_nakama_cluster_api_proto_goTypes = []interface{}{
	(Frame_Direct)(0),               // 0: nakama.cluster.Frame.Direct
	(Message_MsgID)(0),              // 1: nakama.cluster.Message.MsgID
	(*Frame)(nil),                   // 2: nakama.cluster.Frame
	(*Envelope)(nil),                // 3: nakama.cluster.Envelope
	(*Error)(nil),                   // 4: nakama.cluster.Error
	(*Message)(nil),                 // 5: nakama.cluster.Message
	nil,                             // 6: nakama.cluster.Envelope.VarsEntry
	nil,                             // 7: nakama.cluster.Error.ContextEntry
	(*Message_SessionStart)(nil),    // 8: nakama.cluster.Message.SessionStart
	(*Message_SessionEnd)(nil),      // 9: nakama.cluster.Message.SessionEnd
	(*Message_PresenceStream)(nil),  // 10: nakama.cluster.Message.PresenceStream
	(*Message_PresenceMeta)(nil),    // 11: nakama.cluster.Message.PresenceMeta
	(*Message_PresenceID)(nil),      // 12: nakama.cluster.Message.PresenceID
	(*Message_Presence)(nil),        // 13: nakama.cluster.Message.Presence
	(*Message_State)(nil),           // 14: nakama.cluster.Message.State
	(*Message_Track)(nil),           // 15: nakama.cluster.Message.Track
	(*Message_Untrack)(nil),         // 16: nakama.cluster.Message.Untrack
	(*Message_UntrackAll)(nil),      // 17: nakama.cluster.Message.UntrackAll
	(*Message_UntrackByStream)(nil), // 18: nakama.cluster.Message.UntrackByStream
	(*Message_UntrackByMode)(nil),   // 19: nakama.cluster.Message.UntrackByMode
	(*Message_TrackUpdate)(nil),     // 20: nakama.cluster.Message.TrackUpdate
	(*Message_Envelope)(nil),        // 21: nakama.cluster.Message.Envelope
	nil,                             // 22: nakama.cluster.Message.SessionStart.VarsEntry
	nil,                             // 23: nakama.cluster.Message.Envelope.SessionIDEntry
}
var file_nakama_cluster_api_proto_depIdxs = []int32{
	0,  // 0: nakama.cluster.Frame.direct:type_name -> nakama.cluster.Frame.Direct
	1,  // 1: nakama.cluster.Envelope.cid:type_name -> nakama.cluster.Message.MsgID
	4,  // 2: nakama.cluster.Envelope.error:type_name -> nakama.cluster.Error
	6,  // 3: nakama.cluster.Envelope.vars:type_name -> nakama.cluster.Envelope.VarsEntry
	7,  // 4: nakama.cluster.Error.context:type_name -> nakama.cluster.Error.ContextEntry
	22, // 5: nakama.cluster.Message.SessionStart.vars:type_name -> nakama.cluster.Message.SessionStart.VarsEntry
	12, // 6: nakama.cluster.Message.Presence.id:type_name -> nakama.cluster.Message.PresenceID
	10, // 7: nakama.cluster.Message.Presence.stream:type_name -> nakama.cluster.Message.PresenceStream
	11, // 8: nakama.cluster.Message.Presence.meta:type_name -> nakama.cluster.Message.PresenceMeta
	13, // 9: nakama.cluster.Message.State.presences:type_name -> nakama.cluster.Message.Presence
	13, // 10: nakama.cluster.Message.Track.presences:type_name -> nakama.cluster.Message.Presence
	13, // 11: nakama.cluster.Message.Untrack.presences:type_name -> nakama.cluster.Message.Presence
	10, // 12: nakama.cluster.Message.UntrackByStream.streams:type_name -> nakama.cluster.Message.PresenceStream
	10, // 13: nakama.cluster.Message.UntrackByMode.skipStream:type_name -> nakama.cluster.Message.PresenceStream
	10, // 14: nakama.cluster.Message.TrackUpdate.stream:type_name -> nakama.cluster.Message.PresenceStream
	11, // 15: nakama.cluster.Message.TrackUpdate.meta:type_name -> nakama.cluster.Message.PresenceMeta
	23, // 16: nakama.cluster.Message.Envelope.sessionID:type_name -> nakama.cluster.Message.Envelope.SessionIDEntry
	3,  // 17: nakama.cluster.ApiServer.Call:input_type -> nakama.cluster.Envelope
	3,  // 18: nakama.cluster.ApiServer.Stream:input_type -> nakama.cluster.Envelope
	3,  // 19: nakama.cluster.ApiServer.Call:output_type -> nakama.cluster.Envelope
	3,  // 20: nakama.cluster.ApiServer.Stream:output_type -> nakama.cluster.Envelope
	19, // [19:21] is the sub-list for method output_type
	17, // [17:19] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_nakama_cluster_api_proto_init() }
func file_nakama_cluster_api_proto_init() {
	if File_nakama_cluster_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nakama_cluster_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nakama_cluster_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Envelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nakama_cluster_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nakama_cluster_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nakama_cluster_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_SessionStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nakama_cluster_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_SessionEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nakama_cluster_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_PresenceStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nakama_cluster_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_PresenceMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nakama_cluster_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_PresenceID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nakama_cluster_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Presence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nakama_cluster_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nakama_cluster_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nakama_cluster_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Untrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nakama_cluster_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_UntrackAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nakama_cluster_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_UntrackByStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nakama_cluster_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_UntrackByMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nakama_cluster_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_TrackUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nakama_cluster_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Envelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nakama_cluster_api_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Envelope_Bytes)(nil),
		(*Envelope_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nakama_cluster_api_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nakama_cluster_api_proto_goTypes,
		DependencyIndexes: file_nakama_cluster_api_proto_depIdxs,
		EnumInfos:         file_nakama_cluster_api_proto_enumTypes,
		MessageInfos:      file_nakama_cluster_api_proto_msgTypes,
	}.Build()
	File_nakama_cluster_api_proto = out.File
	file_nakama_cluster_api_proto_rawDesc = nil
	file_nakama_cluster_api_proto_goTypes = nil
	file_nakama_cluster_api_proto_depIdxs = nil
}
